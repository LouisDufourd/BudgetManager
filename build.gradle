plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.9.23'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

group 'com.plaglefleau'
version '1.3.3'

repositories {
    mavenCentral()

    flatDir {
        dirs("libs")
    }
}

ext {
    junitVersion = '5.10.2'
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.plaglefleau.budgetdesktop'
    mainClass = 'com.plaglefleau.budgetdesktop.MainApplication'
}
kotlin {
    jvmToolchain(21)
}

jar {
    manifest {
        attributes["Manifest-Version"] = "1.0"
        attributes["Main-Class"] = application.mainClass
    }
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {

    implementation("org.jetbrains.kotlin:kotlin-reflect:1.9.0")
    implementation("org.xerial:sqlite-jdbc:3.42.0.0")
    implementation(":TranslationLibrary-1.0.0")
    implementation("com.google.code.gson:gson:2.11.0")
    implementation("org.jetbrains:annotations:24.1.0")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

tasks.register('moveJar', Copy) {
    dependsOn(tasks.shadowJar)
    delete(
            fileTree(tasks.shadowJar.archiveFile.get().asFile.getParent() + "/BudgetDesktop")
                    .matching {
                        include("*.jar")
                    }
    )
    from(tasks.shadowJar.archiveFile.get().asFile.absolutePath)
    into(tasks.shadowJar.archiveFile.get().asFile.getParent() + "/BudgetDesktop")
}

tasks.register("cleanJar", Delete) {
    dependsOn(tasks.moveJar)

    delete(tasks.shadowJar.archiveFile.get().asFile.absolutePath)
}

tasks.register("jarToZip", Zip) {
    dependsOn(tasks.cleanJar)

    from(tasks.shadowJar.archiveFile.get().asFile.getParent() + "/BudgetDesktop")

    archiveFileName.set(project.name + "-" + version + ".zip")

    destinationDirectory.set(file("build/output"))

}

